name: Build
description: Build Linux artifacts

inputs:
  cacheOnly:
    type: boolean
    default: false

runs:
  using: "composite"
  steps:

  - name: Install nix
    uses: "./.github/workflows/get-nix"

  - name: Cache Nix Store
    uses: actions/cache@v3
    id: nix-cache
    with:
      path: /tmp/nixcache
      key: ${{ runner.os }}-nix-cache

  - name: Import Nix Store Cache
    if: "steps.nix-cache.outputs.cache-hit == 'true'"
    shell: bash
    run: nix-store --import < /tmp/nixcache

  # - name: Build Singularity
  #   shell: bash
  #   run: |
  #     set -ex

  #     # Build Singularity target
  #     nix build -L .#singularity

  #     # Assemble artifacts
  #     mkdir packages
  #     cp -v result packages/jv2.sif

  - name: Bundle Executable
    shell: bash
    run: |
      set -ex

      mkdir -p packages

      nix bundle -L .#backend -o packages/backend
      nix bundle -L .#frontend -o packages/frontend
      nix build -L .#singularity -o packages/singularity

  - name: Tidy nix Store
    if: ${{ inputs.cacheOnly == 'true' }}
    shell: bash
    run: |
      set -ex
      # Remove the built jv2 derivations / img from the nix store to save space and leave just the other core build deps
      # Need to do this via sudo so we can use --ignore-liveness
      nixStoreCmd=`which nix-store`
      targets=`nix path-info --all | grep jv2`
      echo "for a in \"$targets\"; do $nixStoreCmd -q --referrers-closure \$a | xargs $nixStoreCmd --delete --ignore-liveness $b; done" | sudo bash

  - name: Export Nix Store Cache
    if: ${{ inputs.cacheOnly == 'true' }}
    shell: bash
    run: nix-store --export $(find /nix/store -maxdepth 1 -name '*-*') > /tmp/nixcache

  - name: Upload Package Artifacts
    if: ${{ inputs.cacheOnly == 'false' }}
    uses: actions/upload-artifact@v3
    with:
      name: packages
      path: ${{ github.workspace }}/packages
